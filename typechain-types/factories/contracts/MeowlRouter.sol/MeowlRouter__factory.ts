/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MeowlRouter,
  MeowlRouterInterface,
} from "../../../contracts/MeowlRouter.sol/MeowlRouter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "recover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a080604052346100235733608052610a5890816100298239608051816107e50152f35b600080fdfe60406080815260049081361015610728575b361561030657600080916060938235851c90601435861c602835871c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2958685148061071f575b156106685750610069620186a0610062346108c8565b04346108ed565b863b156103b0578551630d0e30db60e41b81526000818681858c5af1801561065d57610649575b50600080918751602081019163a9059cbb60e01b83528560248301526044820152604481526100be8161079c565b5190828a5af16100cc61090e565b50156106105733905b8551630240bc6b60e21b815298808a8681855afa998a156106065789918a9b6105ab575b5050838610996001600160701b039081169691168a156105a55795925b8751968794856370a0823160e01b94858252868a830152602097889160249c8d915afa80156104505783908e90610574575b61015292506108ed565b801561051e578215801580610515575b156104c1576103e58083029280840482036104ae5784020292828404148215171561049a576103e880850294850414171561048857820180921161047657811561046257049a1561045a57898b935b89518481526001600160a01b039093168884018190529486848b818b5afa938415610450578d94610421575b508a519087820182811067ffffffffffffffff82111761040d578c528d8252823b15610409579290918d928c5194859363022c0d9f60e01b85528c8501528c8401528760448401526080606484015280519081608485015289855b8381106103e8575050508360a484838383839684010152601f801991011681010301925af180156103de57908b916103c6575b50508751918252828683015283828881885afa80156103bc578a90610388575b61029592506108ed565b91603c3560801c8310610351575030146102ab57005b81860361032c575050833b1561032857849186918385519687948593632e1a7d4d60e01b85528401525af190811561031f5750610308575b505061030081620186a06102f9610306946108c8565b04906108ed565b336109d7565b005b6103128291610772565b61031c57806102e3565b80fd5b513d84823e3d90fd5b8480fd5b93509450505061030693506103499150620186a06102f9826108c8565b90339061094e565b846013876064938a519362461bcd60e51b855284015282015272151bdbc81b1a5d1d1b19481c9958d95a5d9959606a1b6044820152fd5b508382813d83116103b5575b61039e81836107b8565b810103126103b057610295915161028b565b600080fd5b503d610394565b88513d8c823e3d90fd5b6103cf90610772565b6103da57893861026b565b8980fd5b89513d8d823e3d90fd5b8281939597508294965001015160a4828801015201918e9391898694610238565b8d80fd5b8b60418c634e487b7160e01b600052526000fd5b9093508681813d8311610449575b61043981836107b8565b810103126103b0575192386101dd565b503d61042f565b8b513d8f823e3d90fd5b8a8a936101b1565b88601289634e487b7160e01b600052526000fd5b634e487b7160e01b8c5260118852888cfd5b634e487b7160e01b8d5260118952898dfd5b8a60118b634e487b7160e01b600052526000fd5b50634e487b7160e01b8f5260118b528b8ffd5b508a5162461bcd60e51b8152808a018890526028818c01527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b6064820152608490fd5b50821515610162565b8a5162461bcd60e51b8152808a01889052602b818c01527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b6064820152608490fd5b50508681813d831161059e575b61058b81836107b8565b810103126103b057826101529151610148565b503d610581565b92610116565b819b508092503d83116105ff575b6105c381836107b8565b810103126105fb576105d4896108fa565b866105e160208c016108fa565b9a015163ffffffff8116036105f75738806100f9565b8880fd5b8780fd5b503d6105b9565b87513d8b823e3d90fd5b845162461bcd60e51b815260208185015260136024820152721cd85999551c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b610654919850610772565b60009687610090565b87513d6000823e3d90fd5b855160208101906323b872dd60e01b8252336024820152836044820152604c3560801c60648201526064815260a0810181811067ffffffffffffffff82111761070c57885251829182885af16106bc61090e565b50156106c95730906100d5565b845162461bcd60e51b8152602081850152601760248201527f736166655472616e7366657246726f6d206661696c65640000000000000000006044820152606490fd5b634e487b7160e01b845260418752602484fd5b5034151561004c565b6000803560e01c630cd865ec1461073f5750610011565b823461076e57602036600319011261076e57356001600160a01b038116810361076e5761076b906107da565b80f35b5080fd5b67ffffffffffffffff811161078657604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761078657604052565b90601f8019910116810190811067ffffffffffffffff82111761078657604052565b6001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216330361089d57168061081f575061081d47336109d7565b565b6040516370a0823160e01b81523060048201529190602083602481845afa9283156108915760009361085a575b509161081d9192339061094e565b6020813d8211610889575b81610872602093836107b8565b810103126108855751925061081d61084c565b8380fd5b3d9150610865565b6040513d6000823e3d90fd5b606460405162461bcd60e51b815260206004820152600460248201526373686f6f60e01b6044820152fd5b9060016000921517156108d757565b634e487b7160e01b600052601160045260246000fd5b919082039182116108d757565b51906001600160701b03821682036103b057565b3d15610949573d9067ffffffffffffffff8211610786576040519161093d601f8201601f1916602001846107b8565b82523d6000602084013e565b606090565b600092838093604051602081019363a9059cbb60e01b855260018060a01b0380931660248301526044820152604481526109878161079c565b5193165af161099461090e565b501561099c57565b60405162461bcd60e51b81526020600482015260136024820152721cd85999551c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b600080809381935af1156109e757565b60405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b6044820152606490fdfea26469706673582212202444a524c7ad88ca741ba6b6e98fff6ec22e6e9cd891a283642587e9bed7711e64736f6c63430008130033";

type MeowlRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MeowlRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MeowlRouter__factory extends ContractFactory {
  constructor(...args: MeowlRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MeowlRouter> {
    return super.deploy(overrides || {}) as Promise<MeowlRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MeowlRouter {
    return super.attach(address) as MeowlRouter;
  }
  override connect(signer: Signer): MeowlRouter__factory {
    return super.connect(signer) as MeowlRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MeowlRouterInterface {
    return new utils.Interface(_abi) as MeowlRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MeowlRouter {
    return new Contract(address, _abi, signerOrProvider) as MeowlRouter;
  }
}
