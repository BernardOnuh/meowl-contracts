/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MeowlInterface extends utils.Interface {
  functions: {
    "_isExcludedMaxTransactionAmount(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "automatedMarketMakerPairs(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyFees()": FunctionFragment;
    "createPair()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "devAmount()": FunctionFragment;
    "devWallet()": FunctionFragment;
    "enableTrading()": FunctionFragment;
    "excludeFromFees(address,bool)": FunctionFragment;
    "excludeFromMaxTransaction(address,bool)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFees(address)": FunctionFragment;
    "limitsInEffect()": FunctionFragment;
    "lpAmount()": FunctionFragment;
    "lpWallet()": FunctionFragment;
    "maxTransactionAmount()": FunctionFragment;
    "maxWallet()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "reduceFees(uint256,uint256)": FunctionFragment;
    "removeLimits()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revshareAmount()": FunctionFragment;
    "rewardSplitter()": FunctionFragment;
    "sellFees()": FunctionFragment;
    "setAutomatedMarketMakerPair(address,bool)": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "swapTokensAtAmount()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingActive()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "updateFeeWallet(address,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_isExcludedMaxTransactionAmount"
      | "allowance"
      | "approve"
      | "automatedMarketMakerPairs"
      | "balanceOf"
      | "buyFees"
      | "createPair"
      | "decimals"
      | "decreaseAllowance"
      | "devAmount"
      | "devWallet"
      | "enableTrading"
      | "excludeFromFees"
      | "excludeFromMaxTransaction"
      | "increaseAllowance"
      | "isExcludedFromFees"
      | "limitsInEffect"
      | "lpAmount"
      | "lpWallet"
      | "maxTransactionAmount"
      | "maxWallet"
      | "name"
      | "owner"
      | "reduceFees"
      | "removeLimits"
      | "renounceOwnership"
      | "revshareAmount"
      | "rewardSplitter"
      | "sellFees"
      | "setAutomatedMarketMakerPair"
      | "swapEnabled"
      | "swapTokensAtAmount"
      | "symbol"
      | "totalSupply"
      | "tradingActive"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "uniswapV2Router"
      | "updateFeeWallet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_isExcludedMaxTransactionAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "buyFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "devAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "devWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromMaxTransaction",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "limitsInEffect",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxTransactionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reduceFees",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revshareAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSplitter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sellFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeWallet",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_isExcludedMaxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitsInEffect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reduceFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revshareAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeWallet",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SwapBackSuccess(uint256,uint256,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapBackSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SwapBackSuccessEventObject {
  tokenAmount: BigNumber;
  ethAmountReceived: BigNumber;
  success: boolean;
}
export type SwapBackSuccessEvent = TypedEvent<
  [BigNumber, BigNumber, boolean],
  SwapBackSuccessEventObject
>;

export type SwapBackSuccessEventFilter = TypedEventFilter<SwapBackSuccessEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Meowl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MeowlInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _isExcludedMaxTransactionAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    automatedMarketMakerPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPair(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    devWallet(overrides?: CallOverrides): Promise<[string]>;

    enableTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludeFromFees(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludeFromMaxTransaction(
      addressToExclude: PromiseOrValue<string>,
      isExcluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isExcludedFromFees(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    limitsInEffect(overrides?: CallOverrides): Promise<[boolean]>;

    lpAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpWallet(overrides?: CallOverrides): Promise<[string]>;

    maxTransactionAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWallet(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reduceFees(
      buyFees_: PromiseOrValue<BigNumberish>,
      sellFees_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revshareAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardSplitter(overrides?: CallOverrides): Promise<[string]>;

    sellFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAutomatedMarketMakerPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingActive(overrides?: CallOverrides): Promise<[boolean]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    updateFeeWallet(
      rewardSplitter_: PromiseOrValue<string>,
      devWallet_: PromiseOrValue<string>,
      lpWallet_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _isExcludedMaxTransactionAmount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  automatedMarketMakerPairs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyFees(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devAmount(overrides?: CallOverrides): Promise<BigNumber>;

  devWallet(overrides?: CallOverrides): Promise<string>;

  enableTrading(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludeFromFees(
    account: PromiseOrValue<string>,
    excluded: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludeFromMaxTransaction(
    addressToExclude: PromiseOrValue<string>,
    isExcluded: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isExcludedFromFees(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  limitsInEffect(overrides?: CallOverrides): Promise<boolean>;

  lpAmount(overrides?: CallOverrides): Promise<BigNumber>;

  lpWallet(overrides?: CallOverrides): Promise<string>;

  maxTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  reduceFees(
    buyFees_: PromiseOrValue<BigNumberish>,
    sellFees_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLimits(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revshareAmount(overrides?: CallOverrides): Promise<BigNumber>;

  rewardSplitter(overrides?: CallOverrides): Promise<string>;

  sellFees(overrides?: CallOverrides): Promise<BigNumber>;

  setAutomatedMarketMakerPair(
    pair: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingActive(overrides?: CallOverrides): Promise<boolean>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  updateFeeWallet(
    rewardSplitter_: PromiseOrValue<string>,
    devWallet_: PromiseOrValue<string>,
    lpWallet_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _isExcludedMaxTransactionAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    automatedMarketMakerPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFees(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    devAmount(overrides?: CallOverrides): Promise<BigNumber>;

    devWallet(overrides?: CallOverrides): Promise<string>;

    enableTrading(overrides?: CallOverrides): Promise<void>;

    excludeFromFees(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromMaxTransaction(
      addressToExclude: PromiseOrValue<string>,
      isExcluded: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFees(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    limitsInEffect(overrides?: CallOverrides): Promise<boolean>;

    lpAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lpWallet(overrides?: CallOverrides): Promise<string>;

    maxTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    reduceFees(
      buyFees_: PromiseOrValue<BigNumberish>,
      sellFees_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLimits(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revshareAmount(overrides?: CallOverrides): Promise<BigNumber>;

    rewardSplitter(overrides?: CallOverrides): Promise<string>;

    sellFees(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActive(overrides?: CallOverrides): Promise<boolean>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    updateFeeWallet(
      rewardSplitter_: PromiseOrValue<string>,
      devWallet_: PromiseOrValue<string>,
      lpWallet_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SwapBackSuccess(uint256,uint256,bool)"(
      tokenAmount?: null,
      ethAmountReceived?: null,
      success?: null
    ): SwapBackSuccessEventFilter;
    SwapBackSuccess(
      tokenAmount?: null,
      ethAmountReceived?: null,
      success?: null
    ): SwapBackSuccessEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    _isExcludedMaxTransactionAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    automatedMarketMakerPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFees(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devAmount(overrides?: CallOverrides): Promise<BigNumber>;

    devWallet(overrides?: CallOverrides): Promise<BigNumber>;

    enableTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludeFromFees(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludeFromMaxTransaction(
      addressToExclude: PromiseOrValue<string>,
      isExcluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isExcludedFromFees(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitsInEffect(overrides?: CallOverrides): Promise<BigNumber>;

    lpAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lpWallet(overrides?: CallOverrides): Promise<BigNumber>;

    maxTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reduceFees(
      buyFees_: PromiseOrValue<BigNumberish>,
      sellFees_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revshareAmount(overrides?: CallOverrides): Promise<BigNumber>;

    rewardSplitter(overrides?: CallOverrides): Promise<BigNumber>;

    sellFees(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActive(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    updateFeeWallet(
      rewardSplitter_: PromiseOrValue<string>,
      devWallet_: PromiseOrValue<string>,
      lpWallet_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _isExcludedMaxTransactionAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    automatedMarketMakerPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPair(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromFees(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromMaxTransaction(
      addressToExclude: PromiseOrValue<string>,
      isExcluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFees(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limitsInEffect(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTransactionAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reduceFees(
      buyFees_: PromiseOrValue<BigNumberish>,
      sellFees_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revshareAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardSplitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapTokensAtAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateFeeWallet(
      rewardSplitter_: PromiseOrValue<string>,
      devWallet_: PromiseOrValue<string>,
      lpWallet_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
